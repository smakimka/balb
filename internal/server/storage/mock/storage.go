// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source storage.go -destination mock/storage.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	model "github.com/smakimka/balb/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, u *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, u)
}

// GetBirthdays mocks base method.
func (m *MockStorage) GetBirthdays(ctx context.Context, daysLimit int) ([]model.NotifyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthdays", ctx, daysLimit)
	ret0, _ := ret[0].([]model.NotifyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthdays indicates an expected call of GetBirthdays.
func (mr *MockStorageMockRecorder) GetBirthdays(ctx, daysLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthdays", reflect.TypeOf((*MockStorage)(nil).GetBirthdays), ctx, daysLimit)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, front int, uid string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, front, uid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, front, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, front, uid)
}

// GetUsers mocks base method.
func (m *MockStorage) GetUsers(ctx context.Context, front int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, front)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStorageMockRecorder) GetUsers(ctx, front any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStorage)(nil).GetUsers), ctx, front)
}

// Init mocks base method.
func (m *MockStorage) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStorageMockRecorder) Init(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStorage)(nil).Init), ctx)
}

// SetNotified mocks base method.
func (m *MockStorage) SetNotified(ctx context.Context, userID int, notified bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNotified", ctx, userID, notified)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNotified indicates an expected call of SetNotified.
func (mr *MockStorageMockRecorder) SetNotified(ctx, userID, notified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotified", reflect.TypeOf((*MockStorage)(nil).SetNotified), ctx, userID, notified)
}

// SetOldBirthdays mocks base method.
func (m *MockStorage) SetOldBirthdays(ctx context.Context, daysLimit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOldBirthdays", ctx, daysLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOldBirthdays indicates an expected call of SetOldBirthdays.
func (mr *MockStorageMockRecorder) SetOldBirthdays(ctx, daysLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOldBirthdays", reflect.TypeOf((*MockStorage)(nil).SetOldBirthdays), ctx, daysLimit)
}

// Subscribe mocks base method.
func (m *MockStorage) Subscribe(ctx context.Context, data *model.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockStorageMockRecorder) Subscribe(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStorage)(nil).Subscribe), ctx, data)
}

// Unsubscribe mocks base method.
func (m *MockStorage) Unsubscribe(ctx context.Context, data *model.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockStorageMockRecorder) Unsubscribe(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockStorage)(nil).Unsubscribe), ctx, data)
}

// UpdateUser mocks base method.
func (m *MockStorage) UpdateUser(ctx context.Context, u *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStorageMockRecorder) UpdateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStorage)(nil).UpdateUser), ctx, u)
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetBirthdays mocks base method.
func (m *MockGetter) GetBirthdays(ctx context.Context, daysLimit int) ([]model.NotifyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthdays", ctx, daysLimit)
	ret0, _ := ret[0].([]model.NotifyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthdays indicates an expected call of GetBirthdays.
func (mr *MockGetterMockRecorder) GetBirthdays(ctx, daysLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthdays", reflect.TypeOf((*MockGetter)(nil).GetBirthdays), ctx, daysLimit)
}

// GetUser mocks base method.
func (m *MockGetter) GetUser(ctx context.Context, front int, uid string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, front, uid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGetterMockRecorder) GetUser(ctx, front, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGetter)(nil).GetUser), ctx, front, uid)
}

// GetUsers mocks base method.
func (m *MockGetter) GetUsers(ctx context.Context, front int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, front)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGetterMockRecorder) GetUsers(ctx, front any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGetter)(nil).GetUsers), ctx, front)
}

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// SetNotified mocks base method.
func (m *MockUpdater) SetNotified(ctx context.Context, userID int, notified bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNotified", ctx, userID, notified)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNotified indicates an expected call of SetNotified.
func (mr *MockUpdaterMockRecorder) SetNotified(ctx, userID, notified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotified", reflect.TypeOf((*MockUpdater)(nil).SetNotified), ctx, userID, notified)
}

// SetOldBirthdays mocks base method.
func (m *MockUpdater) SetOldBirthdays(ctx context.Context, daysLimit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOldBirthdays", ctx, daysLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOldBirthdays indicates an expected call of SetOldBirthdays.
func (mr *MockUpdaterMockRecorder) SetOldBirthdays(ctx, daysLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOldBirthdays", reflect.TypeOf((*MockUpdater)(nil).SetOldBirthdays), ctx, daysLimit)
}

// UpdateUser mocks base method.
func (m *MockUpdater) UpdateUser(ctx context.Context, u *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUpdaterMockRecorder) UpdateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUpdater)(nil).UpdateUser), ctx, u)
}

// MockCreater is a mock of Creater interface.
type MockCreater struct {
	ctrl     *gomock.Controller
	recorder *MockCreaterMockRecorder
}

// MockCreaterMockRecorder is the mock recorder for MockCreater.
type MockCreaterMockRecorder struct {
	mock *MockCreater
}

// NewMockCreater creates a new mock instance.
func NewMockCreater(ctrl *gomock.Controller) *MockCreater {
	mock := &MockCreater{ctrl: ctrl}
	mock.recorder = &MockCreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreater) EXPECT() *MockCreaterMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCreater) CreateUser(ctx context.Context, u *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCreaterMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCreater)(nil).CreateUser), ctx, u)
}

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscriber) Subscribe(ctx context.Context, data *model.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriberMockRecorder) Subscribe(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), ctx, data)
}

// Unsubscribe mocks base method.
func (m *MockSubscriber) Unsubscribe(ctx context.Context, data *model.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriberMockRecorder) Unsubscribe(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriber)(nil).Unsubscribe), ctx, data)
}
